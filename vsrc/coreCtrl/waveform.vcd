$version Generated by VerilatedVcd $end
$date Thu Aug 11 14:17:43 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 3 clock $end
  $var wire  5 A io_Core_ctrl_flush [4:0] $end
  $var wire  5 B io_Core_ctrl_hold [4:0] $end
  $var wire  5 C io_Core_dec_rs1 [4:0] $end
  $var wire  1 E io_Core_dec_rs1_en $end
  $var wire  5 D io_Core_dec_rs2 [4:0] $end
  $var wire  1 F io_Core_dec_rs2_en $end
  $var wire  5 H io_Core_exe_rd [4:0] $end
  $var wire  1 G io_Core_exe_wreg_en $end
  $var wire 32 6 io_Core_inst [31:0] $end
  $var wire 32 5 io_Core_inst_addr [31:0] $end
  $var wire  1 K io_Core_jmp_en $end
  $var wire  5 J io_Core_mem_rd [4:0] $end
  $var wire  1 I io_Core_mem_wreg_en $end
  $var wire 32 9 io_Core_rmem_addr [31:0] $end
  $var wire 64 : io_Core_rmem_data [63:0] $end
  $var wire  1 7 io_Core_rmem_en $end
  $var wire  3 8 io_Core_rmem_sel [2:0] $end
  $var wire 32 > io_Core_wmem_addr [31:0] $end
  $var wire 64 ? io_Core_wmem_data [63:0] $end
  $var wire  1 < io_Core_wmem_en $end
  $var wire  2 = io_Core_wmem_sel [1:0] $end
  $var wire 32 M io_Mem_mem_rinst_addr [31:0] $end
  $var wire 32 O io_Mem_mem_rinst_data [31:0] $end
  $var wire  1 L io_Mem_mem_rinst_en $end
  $var wire  1 N io_Mem_mem_rinst_valid $end
  $var wire 32 Q io_Mem_mem_rmem_addr [31:0] $end
  $var wire 64 T io_Mem_mem_rmem_data [63:0] $end
  $var wire  1 P io_Mem_mem_rmem_en $end
  $var wire  2 R io_Mem_mem_rmem_size [1:0] $end
  $var wire  1 S io_Mem_mem_rmem_valid $end
  $var wire 32 W io_Mem_mem_wmem_addr [31:0] $end
  $var wire 64 Y io_Mem_mem_wmem_data [63:0] $end
  $var wire  1 V io_Mem_mem_wmem_en $end
  $var wire  2 X io_Mem_mem_wmem_size [1:0] $end
  $var wire  1 [ io_Mem_mem_wmem_valid $end
  $var wire  1 4 reset $end
  $scope module coreCtrl $end
   $var wire  5 ` Check_io_ctrl_flush [4:0] $end
   $var wire  5 a Check_io_ctrl_hold [4:0] $end
   $var wire  5 C Check_io_dec_rs1 [4:0] $end
   $var wire  1 E Check_io_dec_rs1_en $end
   $var wire  5 D Check_io_dec_rs2 [4:0] $end
   $var wire  1 F Check_io_dec_rs2_en $end
   $var wire  5 H Check_io_exe_rd [4:0] $end
   $var wire  1 G Check_io_exe_wreg_en $end
   $var wire  1 K Check_io_jmp_en $end
   $var wire  5 J Check_io_mem_rd [4:0] $end
   $var wire  1 7 Check_io_mem_rmem_en $end
   $var wire  1 I Check_io_mem_wreg_en $end
   $var wire  1 3 RInst_clock $end
   $var wire 32 5 RInst_io_core_rinst_addr [31:0] $end
   $var wire 32 % RInst_io_core_rinst_data [31:0] $end
   $var wire  1 $ RInst_io_ctrl_rinst_done $end
   $var wire  1 # RInst_io_ctrl_rinst_start $end
   $var wire 32 5 RInst_io_mem_rinst_addr [31:0] $end
   $var wire 32 O RInst_io_mem_rinst_data [31:0] $end
   $var wire  1 & RInst_io_mem_rinst_en $end
   $var wire  1 N RInst_io_mem_rinst_valid $end
   $var wire  1 4 RInst_reset $end
   $var wire  1 3 RMem_clock $end
   $var wire 32 9 RMem_io_core_rmem_addr [31:0] $end
   $var wire 64 \ RMem_io_core_rmem_data [63:0] $end
   $var wire  3 8 RMem_io_core_rmem_sel [2:0] $end
   $var wire  1 ( RMem_io_ctrl_rmem_done $end
   $var wire  1 ' RMem_io_ctrl_rmem_start $end
   $var wire 32 9 RMem_io_mem_rmem_addr [31:0] $end
   $var wire 64 T RMem_io_mem_rmem_data [63:0] $end
   $var wire  1 ) RMem_io_mem_rmem_en $end
   $var wire  2 ^ RMem_io_mem_rmem_size [1:0] $end
   $var wire  1 S RMem_io_mem_rmem_valid $end
   $var wire  1 4 RMem_reset $end
   $var wire  1 3 WMem_clock $end
   $var wire 32 > WMem_io_core_wmem_addr [31:0] $end
   $var wire 64 ? WMem_io_core_wmem_data [63:0] $end
   $var wire  2 = WMem_io_core_wmem_sel [1:0] $end
   $var wire  1 + WMem_io_ctrl_wmem_done $end
   $var wire  1 * WMem_io_ctrl_wmem_start $end
   $var wire 32 > WMem_io_mem_wmem_addr [31:0] $end
   $var wire 64 ? WMem_io_mem_wmem_data [63:0] $end
   $var wire  1 , WMem_io_mem_wmem_en $end
   $var wire  2 _ WMem_io_mem_wmem_size [1:0] $end
   $var wire  1 [ WMem_io_mem_wmem_valid $end
   $var wire  1 4 WMem_reset $end
   $var wire  1 3 clock $end
   $var wire  5 A io_Core_ctrl_flush [4:0] $end
   $var wire  5 B io_Core_ctrl_hold [4:0] $end
   $var wire  5 C io_Core_dec_rs1 [4:0] $end
   $var wire  1 E io_Core_dec_rs1_en $end
   $var wire  5 D io_Core_dec_rs2 [4:0] $end
   $var wire  1 F io_Core_dec_rs2_en $end
   $var wire  5 H io_Core_exe_rd [4:0] $end
   $var wire  1 G io_Core_exe_wreg_en $end
   $var wire 32 6 io_Core_inst [31:0] $end
   $var wire 32 5 io_Core_inst_addr [31:0] $end
   $var wire  1 K io_Core_jmp_en $end
   $var wire  5 J io_Core_mem_rd [4:0] $end
   $var wire  1 I io_Core_mem_wreg_en $end
   $var wire 32 9 io_Core_rmem_addr [31:0] $end
   $var wire 64 : io_Core_rmem_data [63:0] $end
   $var wire  1 7 io_Core_rmem_en $end
   $var wire  3 8 io_Core_rmem_sel [2:0] $end
   $var wire 32 > io_Core_wmem_addr [31:0] $end
   $var wire 64 ? io_Core_wmem_data [63:0] $end
   $var wire  1 < io_Core_wmem_en $end
   $var wire  2 = io_Core_wmem_sel [1:0] $end
   $var wire 32 M io_Mem_mem_rinst_addr [31:0] $end
   $var wire 32 O io_Mem_mem_rinst_data [31:0] $end
   $var wire  1 L io_Mem_mem_rinst_en $end
   $var wire  1 N io_Mem_mem_rinst_valid $end
   $var wire 32 Q io_Mem_mem_rmem_addr [31:0] $end
   $var wire 64 T io_Mem_mem_rmem_data [63:0] $end
   $var wire  1 P io_Mem_mem_rmem_en $end
   $var wire  2 R io_Mem_mem_rmem_size [1:0] $end
   $var wire  1 S io_Mem_mem_rmem_valid $end
   $var wire 32 W io_Mem_mem_wmem_addr [31:0] $end
   $var wire 64 Y io_Mem_mem_wmem_data [63:0] $end
   $var wire  1 V io_Mem_mem_wmem_en $end
   $var wire  2 X io_Mem_mem_wmem_size [1:0] $end
   $var wire  1 [ io_Mem_mem_wmem_valid $end
   $var wire  3 - reg_state [2:0] $end
   $var wire  1 4 reset $end
   $scope module Check $end
    $var wire  5 ` io_ctrl_flush [4:0] $end
    $var wire  5 a io_ctrl_hold [4:0] $end
    $var wire  5 C io_dec_rs1 [4:0] $end
    $var wire  1 E io_dec_rs1_en $end
    $var wire  5 D io_dec_rs2 [4:0] $end
    $var wire  1 F io_dec_rs2_en $end
    $var wire  5 H io_exe_rd [4:0] $end
    $var wire  1 G io_exe_wreg_en $end
    $var wire  1 K io_jmp_en $end
    $var wire  5 J io_mem_rd [4:0] $end
    $var wire  1 7 io_mem_rmem_en $end
    $var wire  1 I io_mem_wreg_en $end
   $upscope $end
   $scope module RInst $end
    $var wire  1 3 clock $end
    $var wire 32 5 io_core_rinst_addr [31:0] $end
    $var wire 32 % io_core_rinst_data [31:0] $end
    $var wire  1 $ io_ctrl_rinst_done $end
    $var wire  1 # io_ctrl_rinst_start $end
    $var wire 32 5 io_mem_rinst_addr [31:0] $end
    $var wire 32 O io_mem_rinst_data [31:0] $end
    $var wire  1 & io_mem_rinst_en $end
    $var wire  1 N io_mem_rinst_valid $end
    $var wire 32 % reg_inst [31:0] $end
    $var wire  2 . reg_state [1:0] $end
    $var wire  1 4 reset $end
   $upscope $end
   $scope module RMem $end
    $var wire  1 3 clock $end
    $var wire 32 9 io_core_rmem_addr [31:0] $end
    $var wire 64 \ io_core_rmem_data [63:0] $end
    $var wire  3 8 io_core_rmem_sel [2:0] $end
    $var wire  1 ( io_ctrl_rmem_done $end
    $var wire  1 ' io_ctrl_rmem_start $end
    $var wire 32 9 io_mem_rmem_addr [31:0] $end
    $var wire 64 T io_mem_rmem_data [63:0] $end
    $var wire  1 ) io_mem_rmem_en $end
    $var wire  2 ^ io_mem_rmem_size [1:0] $end
    $var wire  1 S io_mem_rmem_valid $end
    $var wire 64 0 reg_data [63:0] $end
    $var wire  2 / reg_state [1:0] $end
    $var wire  1 4 reset $end
   $upscope $end
   $scope module WMem $end
    $var wire  1 3 clock $end
    $var wire 32 > io_core_wmem_addr [31:0] $end
    $var wire 64 ? io_core_wmem_data [63:0] $end
    $var wire  2 = io_core_wmem_sel [1:0] $end
    $var wire  1 + io_ctrl_wmem_done $end
    $var wire  1 * io_ctrl_wmem_start $end
    $var wire 32 > io_mem_wmem_addr [31:0] $end
    $var wire 64 ? io_mem_wmem_data [63:0] $end
    $var wire  1 , io_mem_wmem_en $end
    $var wire  2 _ io_mem_wmem_size [1:0] $end
    $var wire  1 [ io_mem_wmem_valid $end
    $var wire  2 2 reg_state [1:0] $end
    $var wire  1 4 reset $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
0&
0'
0(
0)
0*
0+
0,
b000 -
b00 .
b00 /
b0000000000000000000000000000000000000000000000000000000000000000 0
b00 2
13
14
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
07
b000 8
b00000000000000000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 :
1<
b00 =
b00000000000000000000000000000000 >
b0000000000000000000000000000000000000000000000000000000000000000 ?
b00000 A
b11111 B
b00000 C
b01011 D
0E
1F
1G
b01011 H
0I
b00000 J
0K
0L
b00000000000000000000000000000000 M
0N
b00000000000000000000000000000000 O
0P
b00000000000000000000000000000000 Q
b00 R
0S
b0000000000000000000000000000000000000000000000000000000000000000 T
0V
b00000000000000000000000000000000 W
b00 X
b0000000000000000000000000000000000000000000000000000000000000000 Y
0[
b0000000000000000000000000000000000000000000000000000000000000000 \
b00 ^
b00 _
b00100 `
b11000 a
#1
03
#2
b00000000000000000000000000010011 %
13
b00000000000000000000000000010011 6
#3
03
#4
13
#5
03
#6
13
#7
03
04
#8
1#
b001 -
13
#9
03
#10
0#
1&
b010 -
b01 .
13
1L
#11
03
#12
0&
b10 .
13
0L
#13
03
#14
13
#15
03
#16
13
#17
03
#18
13
#19
03
1N
#20
1$
b00000000000000000000000000000000 %
b11 .
13
b00000000000000000000000000000000 6
#21
03
0N
#22
0$
1*
b101 -
b00 .
13
#23
03
#24
0*
1,
b110 -
b01 2
13
0<
1V
#25
03
#26
0,
b10 2
13
0V
#27
03
#28
13
#29
03
#30
13
#31
03
#32
13
#33
03
#34
13
#35
03
#36
13
#37
03
#38
13
#39
03
#40
13
#41
03
#42
13
#43
03
#44
13
#45
03
#46
13
#47
03
#48
13
#49
03
1[
#50
1+
b11 2
13
#51
03
0[
#52
0+
b111 -
b00 2
13
b00100 A
b11000 B
#53
03
#54
1#
b001 -
13
b00000 A
b11111 B
#55
03
#56
0#
1&
b010 -
b01 .
13
1L
#57
03
#58
0&
b10 .
13
0L
#59
03
#60
13
#61
03
#62
13
#63
03
#64
13
#65
03
#66
13
#67
03
#68
13
#69
03
#70
13
#71
03
#72
13
#73
03
#74
13
#75
03
#76
13
#77
03
#78
13
#79
03
1N
#80
1$
b11 .
13
#81
03
0N
#82
0$
b111 -
b00 .
13
b00100 A
b11000 B
#83
03
#84
1#
b001 -
13
b00000 A
b11111 B
#85
03
#86
0#
1&
b010 -
b01 .
13
1L
#87
03
#88
0&
b10 .
13
0L
#89
03
#90
13
#91
03
#92
13
#93
03
#94
13
#95
03
#96
13
#97
03
#98
13
#99
03
