circuit coreCtrl :
  module InstRead :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_rinst_start : UInt<1>, ctrl_rinst_done : UInt<1>, flip core_rinst_addr : UInt<32>, core_rinst_data : UInt<32>, mem_rinst_en : UInt<1>, mem_rinst_addr : UInt<32>, flip mem_rinst_valid : UInt<1>, flip mem_rinst_data : UInt<32>}

    reg reg_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[InstRead.scala 25:26]
    reg reg_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[InstRead.scala 26:26]
    node _T = eq(UInt<2>("h0"), reg_state) @[InstRead.scala 29:3]
    when _T : @[InstRead.scala 29:3]
      when io.ctrl_rinst_start : @[InstRead.scala 32:33]
        reg_state <= UInt<2>("h1") @[InstRead.scala 32:44]
    else :
      node _T_1 = eq(UInt<2>("h1"), reg_state) @[InstRead.scala 29:3]
      when _T_1 : @[InstRead.scala 29:3]
        reg_state <= UInt<2>("h2") @[InstRead.scala 36:17]
      else :
        node _T_2 = eq(UInt<2>("h2"), reg_state) @[InstRead.scala 29:3]
        when _T_2 : @[InstRead.scala 29:3]
          when io.mem_rinst_valid : @[InstRead.scala 40:32]
            reg_state <= UInt<2>("h3") @[InstRead.scala 40:43]
        else :
          node _T_3 = eq(UInt<2>("h3"), reg_state) @[InstRead.scala 29:3]
          when _T_3 : @[InstRead.scala 29:3]
            reg_state <= UInt<2>("h0") @[InstRead.scala 44:17]
    node _T_4 = eq(reg_state, UInt<2>("h2")) @[InstRead.scala 48:18]
    node _T_5 = and(_T_4, io.mem_rinst_valid) @[InstRead.scala 48:29]
    when _T_5 : @[InstRead.scala 49:3]
      reg_inst <= io.mem_rinst_data @[InstRead.scala 50:14]
    node _io_ctrl_rinst_done_T = eq(reg_state, UInt<2>("h3")) @[InstRead.scala 55:36]
    io.ctrl_rinst_done <= _io_ctrl_rinst_done_T @[InstRead.scala 55:22]
    node _io_mem_rinst_en_T = eq(reg_state, UInt<2>("h1")) @[InstRead.scala 58:36]
    io.mem_rinst_en <= _io_mem_rinst_en_T @[InstRead.scala 58:22]
    io.mem_rinst_addr <= io.core_rinst_addr @[InstRead.scala 59:22]
    io.core_rinst_data <= reg_inst @[InstRead.scala 62:22]

  module DataRead :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_rmem_start : UInt<1>, ctrl_rmem_done : UInt<1>, flip core_rmem_addr : UInt<32>, flip core_rmem_sel : UInt<3>, core_rmem_data : UInt<64>, mem_rmem_en : UInt<1>, mem_rmem_addr : UInt<32>, mem_rmem_size : UInt<2>, flip mem_rmem_valid : UInt<1>, flip mem_rmem_data : UInt<64>}

    reg reg_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataRead.scala 26:26]
    reg reg_data : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[DataRead.scala 27:26]
    node _T = eq(UInt<2>("h0"), reg_state) @[DataRead.scala 30:3]
    when _T : @[DataRead.scala 30:3]
      when io.ctrl_rmem_start : @[DataRead.scala 33:32]
        reg_state <= UInt<2>("h1") @[DataRead.scala 33:43]
    else :
      node _T_1 = eq(UInt<2>("h1"), reg_state) @[DataRead.scala 30:3]
      when _T_1 : @[DataRead.scala 30:3]
        reg_state <= UInt<2>("h2") @[DataRead.scala 37:17]
      else :
        node _T_2 = eq(UInt<2>("h2"), reg_state) @[DataRead.scala 30:3]
        when _T_2 : @[DataRead.scala 30:3]
          when io.mem_rmem_valid : @[DataRead.scala 41:31]
            reg_state <= UInt<2>("h3") @[DataRead.scala 41:42]
        else :
          node _T_3 = eq(UInt<2>("h3"), reg_state) @[DataRead.scala 30:3]
          when _T_3 : @[DataRead.scala 30:3]
            reg_state <= UInt<2>("h0") @[DataRead.scala 45:17]
    node _T_4 = eq(reg_state, UInt<2>("h2")) @[DataRead.scala 49:18]
    node _T_5 = and(_T_4, io.mem_rmem_valid) @[DataRead.scala 49:29]
    when _T_5 : @[DataRead.scala 50:3]
      reg_data <= io.mem_rmem_data @[DataRead.scala 51:14]
    node _io_ctrl_rmem_done_T = eq(reg_state, UInt<2>("h3")) @[DataRead.scala 56:35]
    io.ctrl_rmem_done <= _io_ctrl_rmem_done_T @[DataRead.scala 56:21]
    node _io_mem_rmem_en_T = eq(reg_state, UInt<2>("h1")) @[DataRead.scala 59:32]
    io.mem_rmem_en <= _io_mem_rmem_en_T @[DataRead.scala 59:18]
    io.mem_rmem_addr <= io.core_rmem_addr @[DataRead.scala 60:20]
    node _io_mem_rmem_size_T = eq(io.core_rmem_sel, UInt<3>("h0")) @[DataRead.scala 63:43]
    node _io_mem_rmem_size_T_1 = eq(io.core_rmem_sel, UInt<3>("h4")) @[DataRead.scala 63:75]
    node _io_mem_rmem_size_T_2 = or(_io_mem_rmem_size_T, _io_mem_rmem_size_T_1) @[DataRead.scala 63:55]
    node _io_mem_rmem_size_T_3 = eq(io.core_rmem_sel, UInt<3>("h1")) @[DataRead.scala 64:43]
    node _io_mem_rmem_size_T_4 = eq(io.core_rmem_sel, UInt<3>("h5")) @[DataRead.scala 64:75]
    node _io_mem_rmem_size_T_5 = or(_io_mem_rmem_size_T_3, _io_mem_rmem_size_T_4) @[DataRead.scala 64:55]
    node _io_mem_rmem_size_T_6 = eq(io.core_rmem_sel, UInt<3>("h2")) @[DataRead.scala 65:43]
    node _io_mem_rmem_size_T_7 = eq(io.core_rmem_sel, UInt<3>("h6")) @[DataRead.scala 65:75]
    node _io_mem_rmem_size_T_8 = or(_io_mem_rmem_size_T_6, _io_mem_rmem_size_T_7) @[DataRead.scala 65:55]
    node _io_mem_rmem_size_T_9 = eq(io.core_rmem_sel, UInt<3>("h3")) @[DataRead.scala 66:43]
    node _io_mem_rmem_size_T_10 = mux(_io_mem_rmem_size_T_9, UInt<2>("h3"), UInt<2>("h0")) @[Mux.scala 101:16]
    node _io_mem_rmem_size_T_11 = mux(_io_mem_rmem_size_T_8, UInt<2>("h2"), _io_mem_rmem_size_T_10) @[Mux.scala 101:16]
    node _io_mem_rmem_size_T_12 = mux(_io_mem_rmem_size_T_5, UInt<2>("h1"), _io_mem_rmem_size_T_11) @[Mux.scala 101:16]
    node _io_mem_rmem_size_T_13 = mux(_io_mem_rmem_size_T_2, UInt<2>("h0"), _io_mem_rmem_size_T_12) @[Mux.scala 101:16]
    io.mem_rmem_size <= _io_mem_rmem_size_T_13 @[DataRead.scala 61:20]
    node _io_core_rmem_data_T = eq(io.core_rmem_sel, UInt<3>("h0")) @[DataRead.scala 72:43]
    node _io_core_rmem_data_T_1 = bits(reg_data, 7, 7) @[DataRead.scala 72:84]
    node _io_core_rmem_data_T_2 = bits(_io_core_rmem_data_T_1, 0, 0) @[Bitwise.scala 74:15]
    node _io_core_rmem_data_T_3 = mux(_io_core_rmem_data_T_2, UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_4 = bits(reg_data, 7, 0) @[DataRead.scala 72:99]
    node _io_core_rmem_data_T_5 = cat(_io_core_rmem_data_T_3, _io_core_rmem_data_T_4) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_6 = eq(io.core_rmem_sel, UInt<3>("h1")) @[DataRead.scala 73:43]
    node _io_core_rmem_data_T_7 = bits(reg_data, 15, 15) @[DataRead.scala 73:84]
    node _io_core_rmem_data_T_8 = bits(_io_core_rmem_data_T_7, 0, 0) @[Bitwise.scala 74:15]
    node _io_core_rmem_data_T_9 = mux(_io_core_rmem_data_T_8, UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_10 = bits(reg_data, 15, 0) @[DataRead.scala 73:99]
    node _io_core_rmem_data_T_11 = cat(_io_core_rmem_data_T_9, _io_core_rmem_data_T_10) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_12 = eq(io.core_rmem_sel, UInt<3>("h2")) @[DataRead.scala 74:43]
    node _io_core_rmem_data_T_13 = bits(reg_data, 31, 31) @[DataRead.scala 74:84]
    node _io_core_rmem_data_T_14 = bits(_io_core_rmem_data_T_13, 0, 0) @[Bitwise.scala 74:15]
    node _io_core_rmem_data_T_15 = mux(_io_core_rmem_data_T_14, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_16 = bits(reg_data, 31, 0) @[DataRead.scala 74:99]
    node _io_core_rmem_data_T_17 = cat(_io_core_rmem_data_T_15, _io_core_rmem_data_T_16) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_18 = eq(io.core_rmem_sel, UInt<3>("h3")) @[DataRead.scala 75:43]
    node _io_core_rmem_data_T_19 = eq(io.core_rmem_sel, UInt<3>("h4")) @[DataRead.scala 76:43]
    node _io_core_rmem_data_T_20 = mux(UInt<1>("h0"), UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_21 = bits(reg_data, 7, 0) @[DataRead.scala 76:91]
    node _io_core_rmem_data_T_22 = cat(_io_core_rmem_data_T_20, _io_core_rmem_data_T_21) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_23 = eq(io.core_rmem_sel, UInt<3>("h5")) @[DataRead.scala 77:43]
    node _io_core_rmem_data_T_24 = mux(UInt<1>("h0"), UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_25 = bits(reg_data, 15, 0) @[DataRead.scala 77:91]
    node _io_core_rmem_data_T_26 = cat(_io_core_rmem_data_T_24, _io_core_rmem_data_T_25) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_27 = eq(io.core_rmem_sel, UInt<3>("h6")) @[DataRead.scala 78:43]
    node _io_core_rmem_data_T_28 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _io_core_rmem_data_T_29 = bits(reg_data, 31, 0) @[DataRead.scala 78:91]
    node _io_core_rmem_data_T_30 = cat(_io_core_rmem_data_T_28, _io_core_rmem_data_T_29) @[Cat.scala 31:58]
    node _io_core_rmem_data_T_31 = mux(_io_core_rmem_data_T_27, _io_core_rmem_data_T_30, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_32 = mux(_io_core_rmem_data_T_23, _io_core_rmem_data_T_26, _io_core_rmem_data_T_31) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_33 = mux(_io_core_rmem_data_T_19, _io_core_rmem_data_T_22, _io_core_rmem_data_T_32) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_34 = mux(_io_core_rmem_data_T_18, reg_data, _io_core_rmem_data_T_33) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_35 = mux(_io_core_rmem_data_T_12, _io_core_rmem_data_T_17, _io_core_rmem_data_T_34) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_36 = mux(_io_core_rmem_data_T_6, _io_core_rmem_data_T_11, _io_core_rmem_data_T_35) @[Mux.scala 101:16]
    node _io_core_rmem_data_T_37 = mux(_io_core_rmem_data_T, _io_core_rmem_data_T_5, _io_core_rmem_data_T_36) @[Mux.scala 101:16]
    io.core_rmem_data <= _io_core_rmem_data_T_37 @[DataRead.scala 70:21]

  module DataWrite :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_wmem_start : UInt<1>, ctrl_wmem_done : UInt<1>, flip core_wmem_addr : UInt<32>, flip core_wmem_sel : UInt<2>, flip core_wmem_data : UInt<64>, mem_wmem_en : UInt<1>, mem_wmem_addr : UInt<32>, mem_wmem_size : UInt<2>, mem_wmem_data : UInt<64>, flip mem_wmem_valid : UInt<1>}

    reg reg_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataWrite.scala 28:26]
    node _T = eq(UInt<2>("h0"), reg_state) @[DataWrite.scala 31:3]
    when _T : @[DataWrite.scala 31:3]
      when io.ctrl_wmem_start : @[DataWrite.scala 34:32]
        reg_state <= UInt<2>("h1") @[DataWrite.scala 34:43]
    else :
      node _T_1 = eq(UInt<2>("h1"), reg_state) @[DataWrite.scala 31:3]
      when _T_1 : @[DataWrite.scala 31:3]
        reg_state <= UInt<2>("h2") @[DataWrite.scala 38:17]
      else :
        node _T_2 = eq(UInt<2>("h2"), reg_state) @[DataWrite.scala 31:3]
        when _T_2 : @[DataWrite.scala 31:3]
          when io.mem_wmem_valid : @[DataWrite.scala 42:31]
            reg_state <= UInt<2>("h3") @[DataWrite.scala 42:42]
        else :
          node _T_3 = eq(UInt<2>("h3"), reg_state) @[DataWrite.scala 31:3]
          when _T_3 : @[DataWrite.scala 31:3]
            reg_state <= UInt<2>("h0") @[DataWrite.scala 46:17]
    node _io_ctrl_wmem_done_T = eq(reg_state, UInt<2>("h3")) @[DataWrite.scala 52:35]
    io.ctrl_wmem_done <= _io_ctrl_wmem_done_T @[DataWrite.scala 52:21]
    node _io_mem_wmem_en_T = eq(reg_state, UInt<2>("h1")) @[DataWrite.scala 55:32]
    io.mem_wmem_en <= _io_mem_wmem_en_T @[DataWrite.scala 55:18]
    io.mem_wmem_addr <= io.core_wmem_addr @[DataWrite.scala 56:20]
    node _io_mem_wmem_size_T = eq(io.core_wmem_sel, UInt<2>("h0")) @[DataWrite.scala 59:43]
    node _io_mem_wmem_size_T_1 = eq(io.core_wmem_sel, UInt<2>("h1")) @[DataWrite.scala 60:43]
    node _io_mem_wmem_size_T_2 = eq(io.core_wmem_sel, UInt<2>("h2")) @[DataWrite.scala 61:43]
    node _io_mem_wmem_size_T_3 = eq(io.core_wmem_sel, UInt<2>("h3")) @[DataWrite.scala 62:43]
    node _io_mem_wmem_size_T_4 = mux(_io_mem_wmem_size_T_3, UInt<2>("h3"), UInt<2>("h0")) @[Mux.scala 101:16]
    node _io_mem_wmem_size_T_5 = mux(_io_mem_wmem_size_T_2, UInt<2>("h2"), _io_mem_wmem_size_T_4) @[Mux.scala 101:16]
    node _io_mem_wmem_size_T_6 = mux(_io_mem_wmem_size_T_1, UInt<2>("h1"), _io_mem_wmem_size_T_5) @[Mux.scala 101:16]
    node _io_mem_wmem_size_T_7 = mux(_io_mem_wmem_size_T, UInt<2>("h0"), _io_mem_wmem_size_T_6) @[Mux.scala 101:16]
    io.mem_wmem_size <= _io_mem_wmem_size_T_7 @[DataWrite.scala 57:20]
    io.mem_wmem_data <= io.core_wmem_data @[DataWrite.scala 64:20]

  module Check :
    output io : { ctrl_flush : UInt<5>, ctrl_hold : UInt<5>, flip dec_rs1 : UInt<5>, flip dec_rs2 : UInt<5>, flip dec_rs1_en : UInt<1>, flip dec_rs2_en : UInt<1>, flip exe_wreg_en : UInt<1>, flip exe_rd : UInt<5>, flip mem_wreg_en : UInt<1>, flip mem_rd : UInt<5>, flip mem_rmem_en : UInt<1>, flip jmp_en : UInt<1>}

    node _io_ctrl_flush_T = and(io.exe_wreg_en, io.dec_rs1_en) @[Check.scala 28:37]
    node _io_ctrl_flush_T_1 = neq(io.exe_rd, UInt<1>("h0")) @[Check.scala 28:68]
    node _io_ctrl_flush_T_2 = and(_io_ctrl_flush_T, _io_ctrl_flush_T_1) @[Check.scala 28:55]
    node _io_ctrl_flush_T_3 = eq(io.exe_rd, io.dec_rs1) @[Check.scala 28:89]
    node _io_ctrl_flush_T_4 = and(_io_ctrl_flush_T_2, _io_ctrl_flush_T_3) @[Check.scala 28:76]
    node _io_ctrl_flush_T_5 = and(io.exe_wreg_en, io.dec_rs2_en) @[Check.scala 29:37]
    node _io_ctrl_flush_T_6 = neq(io.exe_rd, UInt<1>("h0")) @[Check.scala 29:68]
    node _io_ctrl_flush_T_7 = and(_io_ctrl_flush_T_5, _io_ctrl_flush_T_6) @[Check.scala 29:55]
    node _io_ctrl_flush_T_8 = eq(io.exe_rd, io.dec_rs2) @[Check.scala 29:89]
    node _io_ctrl_flush_T_9 = and(_io_ctrl_flush_T_7, _io_ctrl_flush_T_8) @[Check.scala 29:76]
    node _io_ctrl_flush_T_10 = and(io.mem_wreg_en, io.mem_rmem_en) @[Check.scala 30:37]
    node _io_ctrl_flush_T_11 = and(_io_ctrl_flush_T_10, io.dec_rs1_en) @[Check.scala 30:55]
    node _io_ctrl_flush_T_12 = neq(io.mem_rd, UInt<1>("h0")) @[Check.scala 30:85]
    node _io_ctrl_flush_T_13 = and(_io_ctrl_flush_T_11, _io_ctrl_flush_T_12) @[Check.scala 30:72]
    node _io_ctrl_flush_T_14 = eq(io.mem_rd, io.dec_rs1) @[Check.scala 30:106]
    node _io_ctrl_flush_T_15 = and(_io_ctrl_flush_T_13, _io_ctrl_flush_T_14) @[Check.scala 30:93]
    node _io_ctrl_flush_T_16 = and(io.mem_wreg_en, io.mem_rmem_en) @[Check.scala 31:37]
    node _io_ctrl_flush_T_17 = and(_io_ctrl_flush_T_16, io.dec_rs2_en) @[Check.scala 31:55]
    node _io_ctrl_flush_T_18 = neq(io.mem_rd, UInt<1>("h0")) @[Check.scala 31:85]
    node _io_ctrl_flush_T_19 = and(_io_ctrl_flush_T_17, _io_ctrl_flush_T_18) @[Check.scala 31:72]
    node _io_ctrl_flush_T_20 = eq(io.mem_rd, io.dec_rs2) @[Check.scala 31:106]
    node _io_ctrl_flush_T_21 = and(_io_ctrl_flush_T_19, _io_ctrl_flush_T_20) @[Check.scala 31:93]
    node _io_ctrl_flush_T_22 = mux(io.jmp_en, UInt<4>("h8"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_ctrl_flush_T_23 = mux(_io_ctrl_flush_T_21, UInt<3>("h4"), _io_ctrl_flush_T_22) @[Mux.scala 101:16]
    node _io_ctrl_flush_T_24 = mux(_io_ctrl_flush_T_15, UInt<3>("h4"), _io_ctrl_flush_T_23) @[Mux.scala 101:16]
    node _io_ctrl_flush_T_25 = mux(_io_ctrl_flush_T_9, UInt<3>("h4"), _io_ctrl_flush_T_24) @[Mux.scala 101:16]
    node _io_ctrl_flush_T_26 = mux(_io_ctrl_flush_T_4, UInt<3>("h4"), _io_ctrl_flush_T_25) @[Mux.scala 101:16]
    io.ctrl_flush <= _io_ctrl_flush_T_26 @[Check.scala 26:17]
    node _io_ctrl_hold_T = and(io.exe_wreg_en, io.dec_rs1_en) @[Check.scala 36:37]
    node _io_ctrl_hold_T_1 = neq(io.exe_rd, UInt<1>("h0")) @[Check.scala 36:68]
    node _io_ctrl_hold_T_2 = and(_io_ctrl_hold_T, _io_ctrl_hold_T_1) @[Check.scala 36:55]
    node _io_ctrl_hold_T_3 = eq(io.exe_rd, io.dec_rs1) @[Check.scala 36:89]
    node _io_ctrl_hold_T_4 = and(_io_ctrl_hold_T_2, _io_ctrl_hold_T_3) @[Check.scala 36:76]
    node _io_ctrl_hold_T_5 = and(io.exe_wreg_en, io.dec_rs2_en) @[Check.scala 37:37]
    node _io_ctrl_hold_T_6 = neq(io.exe_rd, UInt<1>("h0")) @[Check.scala 37:68]
    node _io_ctrl_hold_T_7 = and(_io_ctrl_hold_T_5, _io_ctrl_hold_T_6) @[Check.scala 37:55]
    node _io_ctrl_hold_T_8 = eq(io.exe_rd, io.dec_rs2) @[Check.scala 37:89]
    node _io_ctrl_hold_T_9 = and(_io_ctrl_hold_T_7, _io_ctrl_hold_T_8) @[Check.scala 37:76]
    node _io_ctrl_hold_T_10 = and(io.mem_wreg_en, io.mem_rmem_en) @[Check.scala 38:37]
    node _io_ctrl_hold_T_11 = and(_io_ctrl_hold_T_10, io.dec_rs1_en) @[Check.scala 38:55]
    node _io_ctrl_hold_T_12 = neq(io.mem_rd, UInt<1>("h0")) @[Check.scala 38:85]
    node _io_ctrl_hold_T_13 = and(_io_ctrl_hold_T_11, _io_ctrl_hold_T_12) @[Check.scala 38:72]
    node _io_ctrl_hold_T_14 = eq(io.mem_rd, io.dec_rs1) @[Check.scala 38:106]
    node _io_ctrl_hold_T_15 = and(_io_ctrl_hold_T_13, _io_ctrl_hold_T_14) @[Check.scala 38:93]
    node _io_ctrl_hold_T_16 = and(io.mem_wreg_en, io.mem_rmem_en) @[Check.scala 39:37]
    node _io_ctrl_hold_T_17 = and(_io_ctrl_hold_T_16, io.dec_rs2_en) @[Check.scala 39:55]
    node _io_ctrl_hold_T_18 = neq(io.mem_rd, UInt<1>("h0")) @[Check.scala 39:85]
    node _io_ctrl_hold_T_19 = and(_io_ctrl_hold_T_17, _io_ctrl_hold_T_18) @[Check.scala 39:72]
    node _io_ctrl_hold_T_20 = eq(io.mem_rd, io.dec_rs2) @[Check.scala 39:106]
    node _io_ctrl_hold_T_21 = and(_io_ctrl_hold_T_19, _io_ctrl_hold_T_20) @[Check.scala 39:93]
    node _io_ctrl_hold_T_22 = mux(_io_ctrl_hold_T_21, UInt<5>("h18"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_ctrl_hold_T_23 = mux(_io_ctrl_hold_T_15, UInt<5>("h18"), _io_ctrl_hold_T_22) @[Mux.scala 101:16]
    node _io_ctrl_hold_T_24 = mux(_io_ctrl_hold_T_9, UInt<5>("h18"), _io_ctrl_hold_T_23) @[Mux.scala 101:16]
    node _io_ctrl_hold_T_25 = mux(_io_ctrl_hold_T_4, UInt<5>("h18"), _io_ctrl_hold_T_24) @[Mux.scala 101:16]
    io.ctrl_hold <= _io_ctrl_hold_T_25 @[Check.scala 34:17]

  module coreCtrl :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip Core : { inst_addr : UInt<32>, flip inst : UInt<32>, rmem_en : UInt<1>, rmem_sel : UInt<3>, rmem_addr : UInt<32>, flip rmem_data : UInt<64>, wmem_en : UInt<1>, wmem_sel : UInt<2>, wmem_addr : UInt<32>, wmem_data : UInt<64>, flip ctrl_flush : UInt<5>, flip ctrl_hold : UInt<5>, dec_rs1 : UInt<5>, dec_rs2 : UInt<5>, dec_rs1_en : UInt<1>, dec_rs2_en : UInt<1>, exe_wreg_en : UInt<1>, exe_rd : UInt<5>, mem_wreg_en : UInt<1>, mem_rd : UInt<5>, jmp_en : UInt<1>}, Mem : { mem_rinst_en : UInt<1>, mem_rinst_addr : UInt<32>, flip mem_rinst_valid : UInt<1>, flip mem_rinst_data : UInt<32>, mem_rmem_en : UInt<1>, mem_rmem_addr : UInt<32>, mem_rmem_size : UInt<2>, flip mem_rmem_valid : UInt<1>, flip mem_rmem_data : UInt<64>, mem_wmem_en : UInt<1>, mem_wmem_addr : UInt<32>, mem_wmem_size : UInt<2>, mem_wmem_data : UInt<64>, flip mem_wmem_valid : UInt<1>}}

    inst RInst of InstRead @[coreCtrl.scala 43:21]
    RInst.clock <= clock
    RInst.reset <= reset
    inst RMem of DataRead @[coreCtrl.scala 44:21]
    RMem.clock <= clock
    RMem.reset <= reset
    inst WMem of DataWrite @[coreCtrl.scala 45:21]
    WMem.clock <= clock
    WMem.reset <= reset
    inst Check of Check @[coreCtrl.scala 46:21]
    reg reg_state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[coreCtrl.scala 48:26]
    node _T = eq(UInt<3>("h0"), reg_state) @[coreCtrl.scala 50:3]
    when _T : @[coreCtrl.scala 50:3]
      reg_state <= UInt<3>("h1") @[coreCtrl.scala 53:17]
    else :
      node _T_1 = eq(UInt<3>("h1"), reg_state) @[coreCtrl.scala 50:3]
      when _T_1 : @[coreCtrl.scala 50:3]
        reg_state <= UInt<3>("h2") @[coreCtrl.scala 58:17]
      else :
        node _T_2 = eq(UInt<3>("h2"), reg_state) @[coreCtrl.scala 50:3]
        when _T_2 : @[coreCtrl.scala 50:3]
          when RInst.io.ctrl_rinst_done : @[coreCtrl.scala 63:7]
            node _reg_state_T = mux(io.Core.wmem_en, UInt<3>("h5"), UInt<3>("h7")) @[Mux.scala 101:16]
            node _reg_state_T_1 = mux(io.Core.rmem_en, UInt<3>("h3"), _reg_state_T) @[Mux.scala 101:16]
            reg_state <= _reg_state_T_1 @[coreCtrl.scala 64:19]
        else :
          node _T_3 = eq(UInt<3>("h3"), reg_state) @[coreCtrl.scala 50:3]
          when _T_3 : @[coreCtrl.scala 50:3]
            reg_state <= UInt<3>("h4") @[coreCtrl.scala 74:17]
          else :
            node _T_4 = eq(UInt<3>("h4"), reg_state) @[coreCtrl.scala 50:3]
            when _T_4 : @[coreCtrl.scala 50:3]
              when RMem.io.ctrl_rmem_done : @[coreCtrl.scala 78:36]
                reg_state <= UInt<3>("h7") @[coreCtrl.scala 78:47]
            else :
              node _T_5 = eq(UInt<3>("h5"), reg_state) @[coreCtrl.scala 50:3]
              when _T_5 : @[coreCtrl.scala 50:3]
                reg_state <= UInt<3>("h6") @[coreCtrl.scala 83:17]
              else :
                node _T_6 = eq(UInt<3>("h6"), reg_state) @[coreCtrl.scala 50:3]
                when _T_6 : @[coreCtrl.scala 50:3]
                  when WMem.io.ctrl_wmem_done : @[coreCtrl.scala 87:36]
                    reg_state <= UInt<3>("h7") @[coreCtrl.scala 87:47]
                else :
                  node _T_7 = eq(UInt<3>("h7"), reg_state) @[coreCtrl.scala 50:3]
                  when _T_7 : @[coreCtrl.scala 50:3]
                    reg_state <= UInt<3>("h1") @[coreCtrl.scala 92:17]
    node _RMem_io_ctrl_rmem_start_T = eq(reg_state, UInt<3>("h3")) @[coreCtrl.scala 98:42]
    RMem.io.ctrl_rmem_start <= _RMem_io_ctrl_rmem_start_T @[coreCtrl.scala 98:27]
    RMem.io.core_rmem_addr <= io.Core.rmem_addr @[coreCtrl.scala 99:27]
    RMem.io.core_rmem_sel <= io.Core.rmem_sel @[coreCtrl.scala 100:27]
    io.Core.rmem_data <= RMem.io.core_rmem_data @[coreCtrl.scala 101:27]
    io.Mem.mem_rmem_en <= RMem.io.mem_rmem_en @[coreCtrl.scala 102:27]
    io.Mem.mem_rmem_addr <= RMem.io.mem_rmem_addr @[coreCtrl.scala 103:27]
    io.Mem.mem_rmem_size <= RMem.io.mem_rmem_size @[coreCtrl.scala 104:27]
    RMem.io.mem_rmem_valid <= io.Mem.mem_rmem_valid @[coreCtrl.scala 105:27]
    RMem.io.mem_rmem_data <= io.Mem.mem_rmem_data @[coreCtrl.scala 106:27]
    node _WMem_io_ctrl_wmem_start_T = eq(reg_state, UInt<3>("h5")) @[coreCtrl.scala 110:42]
    WMem.io.ctrl_wmem_start <= _WMem_io_ctrl_wmem_start_T @[coreCtrl.scala 110:27]
    WMem.io.core_wmem_addr <= io.Core.wmem_addr @[coreCtrl.scala 111:27]
    WMem.io.core_wmem_sel <= io.Core.wmem_sel @[coreCtrl.scala 112:27]
    WMem.io.core_wmem_data <= io.Core.wmem_data @[coreCtrl.scala 113:27]
    io.Mem.mem_wmem_en <= WMem.io.mem_wmem_en @[coreCtrl.scala 114:27]
    io.Mem.mem_wmem_addr <= WMem.io.mem_wmem_addr @[coreCtrl.scala 115:27]
    io.Mem.mem_wmem_size <= WMem.io.mem_wmem_size @[coreCtrl.scala 116:27]
    io.Mem.mem_wmem_data <= WMem.io.mem_wmem_data @[coreCtrl.scala 117:27]
    WMem.io.mem_wmem_valid <= io.Mem.mem_wmem_valid @[coreCtrl.scala 118:27]
    node _RInst_io_ctrl_rinst_start_T = eq(reg_state, UInt<3>("h1")) @[coreCtrl.scala 121:44]
    RInst.io.ctrl_rinst_start <= _RInst_io_ctrl_rinst_start_T @[coreCtrl.scala 121:29]
    RInst.io.core_rinst_addr <= io.Core.inst_addr @[coreCtrl.scala 122:29]
    io.Core.inst <= RInst.io.core_rinst_data @[coreCtrl.scala 123:29]
    io.Mem.mem_rinst_en <= RInst.io.mem_rinst_en @[coreCtrl.scala 124:29]
    io.Mem.mem_rinst_addr <= RInst.io.mem_rinst_addr @[coreCtrl.scala 125:29]
    RInst.io.mem_rinst_valid <= io.Mem.mem_rinst_valid @[coreCtrl.scala 126:29]
    RInst.io.mem_rinst_data <= io.Mem.mem_rinst_data @[coreCtrl.scala 127:29]
    node _io_Core_ctrl_flush_T = eq(reg_state, UInt<3>("h7")) @[coreCtrl.scala 130:44]
    node _io_Core_ctrl_flush_T_1 = mux(_io_Core_ctrl_flush_T, Check.io.ctrl_flush, UInt<1>("h0")) @[coreCtrl.scala 130:32]
    io.Core.ctrl_flush <= _io_Core_ctrl_flush_T_1 @[coreCtrl.scala 130:25]
    node _io_Core_ctrl_hold_T = eq(reg_state, UInt<3>("h7")) @[coreCtrl.scala 131:44]
    node _io_Core_ctrl_hold_T_1 = mux(_io_Core_ctrl_hold_T, Check.io.ctrl_hold, UInt<5>("h1f")) @[coreCtrl.scala 131:32]
    io.Core.ctrl_hold <= _io_Core_ctrl_hold_T_1 @[coreCtrl.scala 131:25]
    Check.io.dec_rs1 <= io.Core.dec_rs1 @[coreCtrl.scala 132:25]
    Check.io.dec_rs2 <= io.Core.dec_rs2 @[coreCtrl.scala 133:25]
    Check.io.dec_rs1_en <= io.Core.dec_rs1_en @[coreCtrl.scala 134:25]
    Check.io.dec_rs2_en <= io.Core.dec_rs2_en @[coreCtrl.scala 135:25]
    Check.io.exe_wreg_en <= io.Core.exe_wreg_en @[coreCtrl.scala 136:25]
    Check.io.exe_rd <= io.Core.exe_rd @[coreCtrl.scala 137:25]
    Check.io.mem_wreg_en <= io.Core.mem_wreg_en @[coreCtrl.scala 138:25]
    Check.io.mem_rd <= io.Core.mem_rd @[coreCtrl.scala 139:25]
    Check.io.mem_rmem_en <= io.Core.rmem_en @[coreCtrl.scala 140:25]
    Check.io.jmp_en <= io.Core.jmp_en @[coreCtrl.scala 141:25]

